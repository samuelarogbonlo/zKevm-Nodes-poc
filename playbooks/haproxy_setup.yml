---
# - name: Install Docker
#   hosts: nodes
#   become: yes
#   tasks:
#     - name: Install docker + docker-compose
#       ansible.builtin.include_role:
#         name: geerlingguy.docker

#     - name: Docker Python wrapper
#       ansible.builtin.apt:
#         name: python3-docker
#         state: present

#     - name: Add ansible user to docker group
#       shell: "usermod -aG docker astar-admin"

#     - name: Reload service docker, in all cases
#       ansible.builtin.service:
#         name: docker
#         state: restarted

- name: Install Geth on Ubuntu
  hosts: nodes
  become: yes  # Required to gain root privileges
  tasks:
    - name: Add the repository and install software-properties-common
      apt:
        name: software-properties-common
        state: present
        update_cache: yes

    - name: Add Ethereum PPA
      apt_repository:
        repo: ppa:ethereum/ethereum
        state: present

    - name: Install Geth
      apt:
        name: ethereum
        state: latest
        update_cache: yes

- name: Setup Astar zkEVM Nodes
  hosts: nodes
  become: yes
  tasks:
    - name: Pull Astar zkEVM Docker image
      docker_image:
        name: staketechnologies/zkevm-prover:v6.0.0
        source: pull

    - name: Start zkEVM Docker Container
      docker_container:
        name: zkEVM_node
        image: staketechnologies/zkevm-prover:v6.0.0
        state: started
        restart_policy: always
        published_ports:
          - "80:80"
          - "443:443"
#         env:
#           RPC_DEBUG: "true"
#           ANOTHER_ENV_VAR: "value"
#         command:
#           - "--rpc"
#           - "--rpcapi=db,eth,net,web3,debug"


- name: Configure HAProxy on Load Balancers
  hosts: load_balancers
  become: yes
  tasks:
    - name: Install HAProxy
      apt:
        name: haproxy
        state: present

    - name: Deploy HAProxy Configuration
      template:
        src: templates/haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
      notify: restart haproxy

    - name: Enable and start HAProxy
      systemd:
        name: haproxy
        enabled: yes
        state: started

  handlers:
    - name: restart haproxy
      systemd:
        name: haproxy
        state: restarted

- name: Setup Astar zkEVM Nodes
  hosts: nodes
  become: yes
  tasks:
    - name: Pull Astar zkEVM Docker image
      docker_image:
        name: staketechnologies/cdk-validium-node
        source: pull

    - name: Start zkEVM Docker Container
      docker_container:
        name: zkEVM_node
        image: staketechnologies/cdk-validium-node
        state: started
        restart_policy: always
        published_ports:
          - "80:80"
          - "443:443"
#         env:
#           RPC_DEBUG: "true"
#           ANOTHER_ENV_VAR: "value"
#         command:
#           - "--rpc"
#           - "--rpcapi=db,eth,net,web3,debug"

# - name: Setup WireGuard VPN
#   hosts: all
#   become: yes
#   tasks:
#     - name: Install WireGuard
#       apt:
#         name: wireguard
#         state: present
#         update_cache: yes

#     - name: Generate WireGuard Private Keys
#       command: wg genkey
#       register: wg_private_key
#       changed_when: false
#       check_mode: false

#     - name: Generate WireGuard Public Keys
#       command: "echo {{ wg_private_key.stdout }} | wg pubkey"
#       register: wg_public_key
#       changed_when: false
#       check_mode: false

#     - name: Set up WireGuard configuration
#       template:
#         src: templates/wg0.conf.j2
#         dest: /etc/wireguard/wg0.conf
#       notify: restart wireguard

#     - name: Enable and start WireGuard
#       systemd:
#         name: wg-quick@wg0
#         enabled: yes
#         state: restarted

#   handlers:
#     - name: restart wireguard
#       systemd:
#         name: wg-quick@wg0
#         state: restarted

# - name: Setup Monitoring Tools on Load Balancer
#   hosts: load_balancers
#   become: yes
#   tasks:
#     - name: Install Prometheus
#       apt:
#         name: prometheus
#         state: present

#     - name: Deploy Prometheus Configuration
#       template:
#         src: templates/prometheus.yml.j2
#         dest: /etc/prometheus/prometheus.yml
#       notify: restart prometheus

#     - name: Install Grafana
#       apt:
#         name: grafana
#         state: present

#     - name: Enable and start Grafana
#       systemd:
#         name: grafana-server
#         enabled: yes
#         state: started

#   handlers:
#     - name: restart haproxy
#       systemd:
#         name: haproxy
#         state: restarted

#     - name: restart prometheus
#       systemd:
#         name: prometheus
#         state: restarted

# - name: Harden SSH Configuration
#   hosts: all
#   become: true
#   tasks:
#     - name: Ensure secure SSH configurations are set
#       lineinfile:
#         path: /etc/ssh/sshd_config
#         regexp: "{{ item.regexp }}"
#         line: "{{ item.line }}"
#       with_items:
#         - { regexp: '^PermitRootLogin', line: 'PermitRootLogin no' }
#         - { regexp: '^PasswordAuthentication', line: 'PasswordAuthentication no' }
#         - { regexp: '^ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
#       notify:
#         - restart sshd

#   handlers:
#     - name: restart sshd
#       systemd:
#         name: ssh
#         state: restarted

# - name: Configure firewall rules
#   hosts: all
#   become: true
#   tasks:
#     - name: Enable UFW
#       community.general.ufw:
#         state: enabled
#         default: deny

#     - name: Allow SSH access
#       community.general.ufw:
#         rule: allow
#         port: 17117
#         proto: tcp

#     - name: Allow HTTP and HTTPS access on the load balancer
#       community.general.ufw:
#         rule: allow
#         port: "{{ item }}"
#         proto: tcp
#       with_items:
#         - 80
#         - 443
#       when: "'load_balancers' in group_names"

# - name: Manage User Accounts and Sudo Privileges
#   hosts: all
#   become: true
#   tasks:
#     - name: Ensure users have the appropriate permissions
#       user:
#         name: "{{ item.name }}"
#         state: present
#         shell: /bin/bash
#         groups: "{{ item.groups }}"
#       with_items:
#         - { name: 'astar-admin', groups: 'sudo' }
